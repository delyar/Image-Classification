# -*- coding: utf-8 -*-
"""Image-Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T9mTcbGnM648GaRZKqY6uiseKgPIpA0A
"""

import tensorflow as tf
from tensorflow import keras
from scipy.spatial import distance

import numpy as np
import matplotlib.pyplot as plt

fashion_mnist = keras.datasets.fashion_mnist

(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot']

print(train_images.shape)
print(test_images.shape)

train_images = train_images / 255.0
test_images = test_images / 255.0

#displaying first 25 pictures of training dataset with their class names

plt.figure(figsize=(10,10))
for i in range(25):
  plt.subplot(5,5,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(train_images[i], cmap=plt.cm.binary)
  plt.xlabel(class_names[train_labels[i]])
plt.show()

#setting up the layers of the model:
model = keras.Sequential([
                          keras.layers.Flatten(input_shape=(28,28)), #convert format of images from 2d array to 1d array of 28*28 array
                          keras.layers.Dense(128, activation=tf.nn.relu), #128 neurons
                          keras.layers.Dense(10, activation=tf.nn.softmax)])#10 neurons --> array of 10 probability scores (cause we have 10 classes)


model.summary()

#settinga of the model:
model.compile(optimizer='adam', # how the model is updated based on the data
              loss='sparse_categorical_crossentropy', #loss function --> measures how accurate the model is --> we want to minimize the loss functions
              metrics=['accuracy']) # fraction of the images correctly classified

#FIT THE MODEL TO THE TRAINING DATA
model.fit(train_images,train_labels,epochs=10)

#EVALUATE THE ACCURACY --> how the model performs on the test dataset?

test_loss, test_acc = model.evaluate(test_images, test_labels)
print('Test Accuracy Is: ', test_acc) 
# accuracy on the test is less than training --> this gap is overfitting

predictions = model.predict(test_images)

def plot_image(i, predictions_array, true_label, img):
  predictions_array, true_label, img = predictions_array[i], true_label[i], img[i]
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])
  plt.imshow(img, cmap=plt.cm.binary)
  predicted_label = np.argmax(predictions_array)
  if predicted_label == true_label:
    color = 'blue'
  else:
    color='red'

  plt.xlabel("{} {:2.0f}% ({})".format(class_names[predicted_label],
                                       100*np.max(predictions_array),
                                       class_names[true_label]), color=color)
  

def plot_value_array(i, predictions_array, true_label):
  predictions_array, true_label = predictions_array[i], true_label[i]
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])
  thisplot=plt.bar(range(10), predictions_array, color='#777777')
  plt.ylim([0,1])
  predicted_label = np.argmax(predictions_array)
  thisplot[predicted_label].set_color('red')
  thisplot[true_label].set_color('green')
  plt.show()

i = 0

plt.figure(figsize=(6,3))
plt.subplot(1,2,1)
plot_image(i, predictions, test_labels, test_images)
plt.subplot(1,2,2)
plot_value_array(i, predictions, test_labels)

godel= keras.Model(inputs=model.inputs, outputs=[model.layers[-2].output])
features = godel.predict(test_images)
print(features.shape)

def get_dist_to_all(i):
  dst_array = []
  given_image_feature = features[i]
  for feature in features:
    dst = distance.euclidean(given_image_feature, feature)
    dst_array.append(dst)
  return dst_array

dst_to_all = get_dist_to_all(i)
print(dst_to_all) #not sorted

k = 50
k_smallest_inx = np.argsort(dst_to_all)[:k] # k smallest indexes (k most similar images to the ith image)
# k_smallest_distances = [dst_to_all[i] for i in k_smallest_inx]
print('indexes of 3 images that are most similar to the ith image sorted: ', k_smallest_inx)

def plot_images_from_index_array(arr):
  for j in arr:
    plt.figure(figsize=(6,3))
    plt.subplot(1,2,1)
    plot_image(j, predictions, test_labels, test_images)
    plt.subplot(1,2,2)
    plot_value_array(j, predictions, test_labels)

plot_images_from_index_array(k_smallest_inx)

# plotting several images with their predictions: (correct pred labels are green and incorrect red) inside () is true label

num_rows = 5
num_cols = 3
num_images = num_rows*num_cols
plt.figure(figsize=(2*2*num_cols, 2*num_rows))
for i in range(num_images):
  plt.subplot(num_rows, 2*num_cols, 2*i+1)
  plot_image(i, predictions, test_labels, test_images)
  plt.subplot(num_rows, 2*num_cols, 2*i+2)
  plot_value_array(i, predictions, test_labels)
plt.show()

#training for one image

img = test_images[0]
img = np.expand_dims(img, 0)
predictions_single = model.predict(img) # batch is 1
print(predictions_single)

"""**Clustering:**"""

clustered_array = np.array_split(k_smallest_inx, 5)
print(clustered_array)
cluster_index = 0

for cluster_of_indexes in clustered_array:
  print("Cluster ", str(cluster_index + 1), ":")
  plot_images_from_index_array(cluster_of_indexes)
  cluster_index +=1